// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}
// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    password      String
    level         Int @default(10)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    accounts      Account[]
    sessions      Session[]

    components    Component[]
    suplierToNomenclatures SupplierToNomenclature[]
    supplierDetails SupplierDetail[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

//SupplierDetail

model SupplierDetail {
    id String @id @default(cuid())
    userId String?
    email String @db.VarChar(255)
    phone String @db.VarChar(255)
    organization String @db.VarChar(255)
    agreement String @db.VarChar(255)
    unp String @db.VarChar(255)
    checkingAccount String @db.VarChar(255)
    bankCode String @db.VarChar(255)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User? @relation(fields:[userId], references: [id], onDelete: Cascade)

}

//SupplierDetail


//Directory//

model DirectoryNomenclature {
    id String @id @default(cuid())
    title String @db.VarChar(255) @unique
    unitId String?
    width Float?
    height Float?
    thickness Float?
    media Json?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    unit DirectoryUnit? @relation(fields: [unitId], references: [id], onDelete: Cascade)
    materials ComponentToNomenclature[]
    nomenclatures SupplierToNomenclature[]
}

model DirectoryUnit {
    id String @id @default(cuid())
    title String @db.VarChar(255) @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    nomenclatures DirectoryNomenclature[]
}

model DirectoryComponentType {
    id String @id @default(cuid())
    title String @db.VarChar(255) @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    components Component[]
}
//Directory//

//Components
model Component {
    id String @id @default(cuid())
    userId String?
    typeId String?
    title String @db.VarChar(255) @unique
    sorting Int @default(100)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User? @relation(fields:[userId], references: [id], onDelete: Cascade)
    type DirectoryComponentType? @relation(fields: [typeId], references: [id], onDelete: Cascade)
    components ComponentToNomenclature[]
    productsToComponents ProductToComponent[]
    
}

model ComponentToNomenclature {

    id String @id @default(cuid())
    componentId String?
    materialId  String?
    quantity Float
    sorting Int @default(100)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    component Component? @relation(fields: [componentId], references: [id], onDelete: Cascade)
    //materialId <=> directoryNomenclatureId
    material DirectoryNomenclature? @relation(fields: [materialId], references: [id], onDelete: Cascade)
}


//SupplierNomenclature

model SupplierToNomenclature {
    id String @id @default(cuid())
    //Пользователь обязателен.
    userId String
    nomenclatureId String?
    unitId String?
    ////////////////////////////////
    ///Непонятные для меня атрибуты сущности? Поля должны быть определены?
    translationRate Float
    minParty Float @default(1.0) //Минимальная партия?
    countPack Float @default(1.0) //Минимальное количество ?
    ////////////////////////////////
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    nomenclature DirectoryNomenclature? @relation(fields:[nomenclatureId], references: [id], onDelete: Cascade)
    supplierToNomenclatures NomenclaturePrice[]
}

model NomenclaturePrice {
    id String @id @default(cuid())
    supplierToNomenclatureId String
    priceUsd Decimal @db.Decimal(10, 2)
    priceRub String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    supplierToNomenclature SupplierToNomenclature @relation(fields: [supplierToNomenclatureId], references: [id], onDelete: Cascade)
}

model ProductToComponent {
    id String @id @default(cuid())
    componentId String?
    productId String?
    sorting Int @default(50)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    component Component? @relation(fields: [componentId], references: [id], onDelete: Cascade)
    product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Product {
    id String @id @default(cuid())
    title String @db.VarChar(255) @unique
    description String? @db.Text
    width Float?
    height Float?
    thickness Float?
    pages Int?
    media Json?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    productToComponents ProductToComponent[]
}
